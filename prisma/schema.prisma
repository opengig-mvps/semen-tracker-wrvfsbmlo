
generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
      
model User {
  id                  Int       @id @default(autoincrement())
  email               String    @unique
  password            String?
  username            String    @unique
  name                String?
  role                String    @default("user")
  isVerified          Boolean   @default(false)
  verificationToken   String?
  otp                 String?
  otpExpiry           DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  semenReports        SemenReport[]
  lifestyleLogs       LifestyleLog[]
  healthRecommendations HealthRecommendation[]
  reminders           Reminder[]
  bookmarks           Bookmark[]
  forumPosts          ForumPost[]
  forumReplies        ForumReply[]
  qnaSessions         QnASession[]
}

model SemenReport {
  id                  Int       @id @default(autoincrement())
  date                DateTime
  count               Float
  motility            Float
  morphology          Float
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  userId              Int
  user                User      @relation(fields: [userId], references: [id])
}

model LifestyleLog {
  id                  Int       @id @default(autoincrement())
  date                DateTime
  sleepHours          Float?
  diet                String?
  exercise            String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  userId              Int
  user                User      @relation(fields: [userId], references: [id])
}

model HealthRecommendation {
  id                  Int       @id @default(autoincrement())
  recommendation      String
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  userId              Int
  user                User      @relation(fields: [userId], references: [id])
}

model Reminder {
  id                  Int       @id @default(autoincrement())
  type                String
  frequency           String
  message             String
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  userId              Int
  user                User      @relation(fields: [userId], references: [id])
}

model Article {
  id                  Int       @id @default(autoincrement())
  title               String
  author              String
  publicationDate     DateTime
  content             String
  category            String
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  bookmarks           Bookmark[]
}

model Bookmark {
  id                  Int       @id @default(autoincrement())
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  userId              Int
  articleId           Int
  user                User      @relation(fields: [userId], references: [id])
  article             Article   @relation(fields: [articleId], references: [id])

  @@unique([userId, articleId])
}

model ForumPost {
  id                  Int       @id @default(autoincrement())
  content             String
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  userId              Int
  user                User      @relation(fields: [userId], references: [id])
  replies             ForumReply[]
}

model ForumReply {
  id                  Int       @id @default(autoincrement())
  content             String
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  userId              Int
  forumPostId         Int
  user                User      @relation(fields: [userId], references: [id])
  forumPost           ForumPost @relation(fields: [forumPostId], references: [id])
}

model QnASession {
  id                  Int       @id @default(autoincrement())
  title               String
  scheduledDate       DateTime
  description         String
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  userId              Int
  user                User      @relation(fields: [userId], references: [id])
}